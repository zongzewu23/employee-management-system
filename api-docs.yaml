openapi: 3.0.1
info:
  title: Employee Management System API
  description: REST API for Employee Management System with JWT Authentication
  version: 1.0.0
servers:
- url: http://localhost:8080
  description: Generated server url
security:
- JWT: []
tags:
- name: Authentication
  description: User authentication and authorization endpoints
paths:
  /api/employees/{id}:
    get:
      tags:
      - employee-controller
      operationId: getEmployeeById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseEmployeeDTO'
    put:
      tags:
      - employee-controller
      operationId: updateEmployee
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmployeeRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseEmployeeDTO'
    delete:
      tags:
      - employee-controller
      operationId: deleteEmployee
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseVoid'
  /api/departments/{id}:
    get:
      tags:
      - department-controller
      operationId: getDepartmentById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: includeEmployees
        in: query
        required: false
        schema:
          type: boolean
          default: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseDepartmentDTO'
    put:
      tags:
      - department-controller
      operationId: updateDepartment
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDepartmentRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseDepartmentDTO'
    delete:
      tags:
      - department-controller
      operationId: deleteDepartment
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseVoid'
  /api/employees:
    get:
      tags:
      - employee-controller
      operationId: getAllEmployees
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseListEmployeeDTO'
    post:
      tags:
      - employee-controller
      operationId: createEmployee
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmployeeRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseEmployeeDTO'
  /api/departments:
    get:
      tags:
      - department-controller
      operationId: getAllDepartments
      parameters:
      - name: includeEmployees
        in: query
        required: false
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseListDepartmentDTO'
    post:
      tags:
      - department-controller
      operationId: createDepartment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDepartmentRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseDepartmentDTO'
  /api/auth/validate:
    post:
      tags:
      - Authentication
      summary: Validate JWT token
      description: Check if a JWT token is valid and return user information
      operationId: validateToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenValidationRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/auth/register:
    post:
      tags:
      - Authentication
      summary: User registration
      description: Register a new user account
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      responses:
        "200":
          description: Registration successful
          content:
            '*/*':
              schema:
                type: object
        "400":
          description: Registration failed
          content:
            '*/*':
              schema:
                type: object
  /api/auth/refresh:
    post:
      tags:
      - Authentication
      summary: Refresh JWT token
      description: Get a new access token using refresh token
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/auth/logout:
    post:
      tags:
      - Authentication
      summary: User logout
      description: Logout user (client-side token removal)
      operationId: logout
      parameters:
      - name: Authorization
        in: header
        description: Authorization header with Bearer token
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
      security:
      - Bearer Authentication: []
  /api/auth/login:
    post:
      tags:
      - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      operationId: login
      requestBody:
        description: Login credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              username: admin
              password: password123
        required: true
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                success: true
                message: Login successful
                data:
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  username: admin
                  expiresIn: 86400
        "400":
          description: Invalid credentials
          content:
            application/json:
              example:
                success: false
                message: Invalid username or password
  /api/employees/{id}/status:
    patch:
      tags:
      - employee-controller
      operationId: updateEmployeeStatus
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: status
        in: query
        required: true
        schema:
          type: string
          enum:
          - ACTIVE
          - INACTIVE
          - TERMINATED
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseEmployeeDTO'
  /api/employees/status/{status}:
    get:
      tags:
      - employee-controller
      operationId: getEmployeesByStatus
      parameters:
      - name: status
        in: path
        required: true
        schema:
          type: string
          enum:
          - ACTIVE
          - INACTIVE
          - TERMINATED
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseListEmployeeDTO'
  /api/employees/search:
    get:
      tags:
      - employee-controller
      operationId: searchEmployees
      parameters:
      - name: name
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseListEmployeeDTO'
  /api/employees/department/{departmentId}:
    get:
      tags:
      - employee-controller
      operationId: getEmployeesByDepartment
      parameters:
      - name: departmentId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseListEmployeeDTO'
  /api/employees/count/department/{departmentId}:
    get:
      tags:
      - employee-controller
      operationId: getEmployeeCountByDepartment
      parameters:
      - name: departmentId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseLong'
  /api/departments/{id}/exists:
    get:
      tags:
      - department-controller
      operationId: departmentExists
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseBoolean'
  /api/departments/{id}/employee-count:
    get:
      tags:
      - department-controller
      operationId: getEmployeeCount
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseLong'
  /api/departments/with-employees:
    get:
      tags:
      - department-controller
      operationId: getDepartmentsWithEmployees
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseListDepartmentDTO'
  /api/departments/search/name:
    get:
      tags:
      - department-controller
      operationId: searchDepartmentsByName
      parameters:
      - name: name
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseListDepartmentDTO'
  /api/departments/search/manager:
    get:
      tags:
      - department-controller
      operationId: searchDepartmentsByManager
      parameters:
      - name: manager
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseListDepartmentDTO'
  /api/departments/search/location:
    get:
      tags:
      - department-controller
      operationId: searchDepartmentsByLocation
      parameters:
      - name: location
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseListDepartmentDTO'
  /api/departments/empty:
    get:
      tags:
      - department-controller
      operationId: getEmptyDepartments
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiResponseListDepartmentDTO'
  /api/auth/me:
    get:
      tags:
      - Authentication
      summary: Get current user info
      description: Get information about the currently authenticated user
      operationId: getCurrentUser
      parameters:
      - name: Authorization
        in: header
        description: Authorization header with Bearer token
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
      security:
      - Bearer Authentication: []
components:
  schemas:
    UpdateEmployeeRequest:
      type: object
      properties:
        firstName:
          maxLength: 100
          minLength: 0
          type: string
        lastName:
          maxLength: 100
          minLength: 0
          type: string
        email:
          maxLength: 150
          minLength: 0
          type: string
        phone:
          maxLength: 20
          minLength: 0
          pattern: "^[+]?[0-9\\s\\-\\(\\)]+$"
          type: string
        position:
          maxLength: 100
          minLength: 0
          type: string
        salary:
          minimum: 0.0
          exclusiveMinimum: true
          type: number
        hireDate:
          type: string
          format: date
        status:
          type: string
          enum:
          - ACTIVE
          - INACTIVE
          - TERMINATED
        departmentId:
          type: integer
          format: int64
    ApiResponseEmployeeDTO:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          $ref: '#/components/schemas/EmployeeDTO'
        error:
          type: string
        timeStamp:
          type: string
          format: date-time
    DepartmentSummaryDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        location:
          type: string
        managerName:
          type: string
    EmployeeDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        position:
          type: string
        salary:
          type: number
        hireDate:
          type: string
          format: date
        status:
          type: string
          enum:
          - ACTIVE
          - INACTIVE
          - TERMINATED
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        department:
          $ref: '#/components/schemas/DepartmentSummaryDTO'
        active:
          type: boolean
        fullName:
          type: string
    UpdateDepartmentRequest:
      type: object
      properties:
        name:
          maxLength: 100
          minLength: 0
          type: string
        description:
          maxLength: 500
          minLength: 0
          type: string
        location:
          maxLength: 100
          minLength: 0
          type: string
        managerName:
          maxLength: 100
          minLength: 0
          type: string
    ApiResponseDepartmentDTO:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          $ref: '#/components/schemas/DepartmentDTO'
        error:
          type: string
        timeStamp:
          type: string
          format: date-time
    DepartmentDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        location:
          type: string
        managerName:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        employees:
          type: array
          items:
            $ref: '#/components/schemas/EmployeeSummaryDTO'
        employeeCount:
          type: integer
          format: int32
        activeEmployeeCount:
          type: integer
          format: int32
        empty:
          type: boolean
    EmployeeSummaryDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        position:
          type: string
        status:
          type: string
          enum:
          - ACTIVE
          - INACTIVE
          - TERMINATED
        fullName:
          type: string
    CreateEmployeeRequest:
      required:
      - email
      - firstName
      - lastName
      type: object
      properties:
        firstName:
          maxLength: 100
          minLength: 0
          type: string
        lastName:
          maxLength: 100
          minLength: 0
          type: string
        email:
          maxLength: 150
          minLength: 0
          type: string
        phone:
          maxLength: 20
          minLength: 0
          pattern: "^[+]?[\\d\\s()-]+$"
          type: string
        position:
          maxLength: 100
          minLength: 0
          type: string
        salary:
          minimum: 0.0
          exclusiveMinimum: true
          type: number
        hireDate:
          type: string
          format: date
        status:
          type: string
          enum:
          - ACTIVE
          - INACTIVE
          - TERMINATED
        departmentId:
          type: integer
          format: int64
    CreateDepartmentRequest:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 100
          minLength: 0
          type: string
        description:
          maxLength: 500
          minLength: 0
          type: string
        location:
          maxLength: 100
          minLength: 0
          type: string
        managerName:
          maxLength: 100
          minLength: 0
          type: string
    TokenValidationRequest:
      required:
      - token
      type: object
      properties:
        token:
          type: string
        cleanToken:
          type: string
    RegisterRequest:
      required:
      - email
      - password
      - username
      type: object
      properties:
        username:
          maxLength: 50
          minLength: 3
          type: string
        password:
          maxLength: 2147483647
          minLength: 6
          type: string
        email:
          type: string
    TokenRefreshRequest:
      required:
      - refreshToken
      type: object
      properties:
        refreshToken:
          type: string
    LoginRequest:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        tokenType:
          type: string
        username:
          type: string
        email:
          type: string
        role:
          type: string
    ApiResponseListEmployeeDTO:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/EmployeeDTO'
        error:
          type: string
        timeStamp:
          type: string
          format: date-time
    ApiResponseLong:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: integer
          format: int64
        error:
          type: string
        timeStamp:
          type: string
          format: date-time
    ApiResponseListDepartmentDTO:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/DepartmentDTO'
        error:
          type: string
        timeStamp:
          type: string
          format: date-time
    ApiResponseBoolean:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: boolean
        error:
          type: string
        timeStamp:
          type: string
          format: date-time
    ApiResponseVoid:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object
        error:
          type: string
        timeStamp:
          type: string
          format: date-time
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
