version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: employee-db-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - employee-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  backend:
    build:
      context: ./backend/employee-management-system
      dockerfile: Dockerfile.prod
    container_name: employee-backend-prod
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SPRING_SECURITY_USER_NAME: ${SPRING_SECURITY_USER_NAME}
      SPRING_SECURITY_USER_PASSWORD: ${SPRING_SECURITY_USER_PASSWORD}
      CORS_ORIGINS: ${CORS_ORIGINS}
      JAVA_OPTS: -Xmx1024m -Xms512m -server
    volumes:
      - ./logs:/var/log
    networks:
      - employee-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: employee-frontend-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
    environment:
      REACT_APP_API_URL: http://localhost:8080/api
      REACT_APP_ENV: production
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - employee-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional)
#  redis:
#    image: redis:7-alpine
#    container_name: employee-redis-prod
#    restart: unless-stopped
#    ports:
#      - "6379:6379"
#    volumes:
#      - redis_data_prod:/data
#    networks:
#      - employee-network
#    healthcheck:
#      test: ["CMD", "redis-cli", "ping"]
#      interval: 30s
#      timeout: 10s
#      retries: 3
#
#volumes:
#  postgres_data_prod:
#    driver: local
#  redis_data_prod:
#    driver: local
#
#networks:
#  employee-network:
#    driver: bridge